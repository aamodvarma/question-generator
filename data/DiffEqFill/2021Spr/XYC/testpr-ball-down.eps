%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 69 20 526 771
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, January 28, 2013 9:48:47 PM EST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
154 254 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
154.000 0 l
154.000 254.000 l
0 254.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 32.0000 ] concat
0 0 144 217 rc
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
q
q
2.00000 w
0 0 1.00000 RG
-2.00000 -2.00000 148.000 221.000 rc
newpath
71.5000 130.600 m
71.5000 188.200 l
S
newpath
80.4375 173.800 m
71.5000 188.200 l
62.5625 173.800 l
S
cliprestore
newpath
0 0 m
0 217.000 l
144.000 217.000 l
144.000 0 l
h
W
Q
q
2.00000 w
1.00000 0 0 RG
-2.00000 -2.00000 148.000 221.000 rc
newpath
71.5000 101.800 m
71.5000 58.5999 l
S
newpath
62.5625 73.0000 m
71.5000 58.5999 l
80.4375 73.0000 l
S
cliprestore
newpath
0 0 m
0 217.000 l
144.000 217.000 l
144.000 0 l
h
W
Q
q
2 J
0 j
[ 1.00000 0 0 1.00000 52.0000 96.7000 ] concat
newpath
39.0000 19.5000 m
39.0000 30.2695 30.2695 39.0000 19.5000 39.0000  c
8.73044 39.0000 0 30.2695 0 19.5000  c
0 8.73044 8.73044 0 19.5000 0  c
30.2695 0 39.0000 8.73044 39.0000 19.5000  c
h
f
[ 1.00000 0 0 1.00000 -52.0000 -96.7000 ] concat
Q
q
0 0 1.00000 RG
[ 1.00000 0 0 1.00000 -5.00000 -32.0000 ] concat
[ 1.00000 0 0 1.00000 5.00000 32.0000 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
50 189 43 27 rc
newpath
58.9843 200.843 m
57.5312 205.906 l
58.1770 204.708 58.7291 203.812 59.1875 203.218  c
59.8958 202.291 60.5885 201.619 61.2656 201.203  c
61.6614 200.963 62.0781 200.843 62.5156 200.843  c
62.8906 200.843 63.2005 200.963 63.4453 201.203  c
63.6901 201.442 63.8125 201.744 63.8125 202.109  c
63.8125 202.484 63.7291 202.963 63.5625 203.546  c
62.7656 206.406 l
63.9843 204.125 65.1406 202.520 66.2343 201.593  c
66.8385 201.093 67.4375 200.843 68.0312 200.843  c
68.3750 200.843 68.6562 200.960 68.8750 201.195  c
69.0937 201.429 69.2031 201.791 69.2031 202.281  c
69.2031 202.718 69.1354 203.182 69.0000 203.671  c
67.7656 208.031 l
67.4947 208.989 67.3593 209.520 67.3593 209.625  c
67.3593 209.729 67.3958 209.817 67.4687 209.890  c
67.5104 209.942 67.5677 209.968 67.6406 209.968  c
67.7135 209.968 67.8437 209.895 68.0312 209.750  c
68.4583 209.427 68.8593 208.994 69.2343 208.453  c
69.6093 208.687 l
69.4218 208.989 69.0911 209.401 68.6171 209.921  c
68.1432 210.442 67.7369 210.796 67.3984 210.984  c
67.0599 211.171 66.7500 211.265 66.4687 211.265  c
66.2083 211.265 65.9895 211.177 65.8125 211.000  c
65.6354 210.822 65.5468 210.604 65.5468 210.343  c
65.5468 209.979 65.6979 209.255 66.0000 208.171  c
67.0312 204.562 l
67.2604 203.729 67.3802 203.270 67.3906 203.187  c
67.4218 203.041 67.4375 202.901 67.4375 202.765  c
67.4375 202.578 67.3958 202.432 67.3125 202.328  c
67.2187 202.224 67.1145 202.171 67.0000 202.171  c
66.6875 202.171 66.3541 202.333 66.0000 202.656  c
64.9687 203.604 64.0052 204.937 63.1093 206.656  c
62.5156 207.781 61.9635 209.229 61.4531 211.000  c
59.7500 211.000 l
61.6718 204.203 l
61.8802 203.474 61.9843 202.984 61.9843 202.734  c
61.9843 202.536 61.9427 202.388 61.8593 202.289  c
61.7760 202.190 61.6770 202.140 61.5625 202.140  c
61.3125 202.140 61.0468 202.229 60.7656 202.406  c
60.3177 202.697 59.7395 203.322 59.0312 204.281  c
58.3229 205.239 57.7760 206.156 57.3906 207.031  c
57.2031 207.447 56.7604 208.770 56.0625 211.000  c
54.3906 211.000 l
56.4687 203.718 l
56.7343 202.781 l
56.7864 202.635 56.8125 202.531 56.8125 202.468  c
56.8125 202.302 56.7395 202.153 56.5937 202.023  c
56.4479 201.893 56.2552 201.828 56.0156 201.828  c
55.9218 201.828 55.6562 201.869 55.2187 201.953  c
55.1093 201.546 l
58.9843 200.843 l
h
f
newpath
f
newpath
88.9843 201.531 m
88.6562 202.703 l
86.7812 202.703 l
86.9270 203.109 87.0000 203.484 87.0000 203.828  c
87.0000 204.817 86.5781 205.697 85.7343 206.468  c
84.8906 207.239 83.7291 207.666 82.2500 207.750  c
81.4583 207.989 80.8645 208.276 80.4687 208.609  c
80.3229 208.724 80.2500 208.849 80.2500 208.984  c
80.2500 209.130 80.3177 209.265 80.4531 209.390  c
80.5885 209.515 80.9270 209.640 81.4687 209.765  c
83.6562 210.265 l
84.8541 210.557 85.6510 210.895 86.0468 211.281  c
86.4218 211.677 86.6093 212.135 86.6093 212.656  c
86.6093 213.270 86.3828 213.830 85.9296 214.335  c
85.4765 214.841 84.8151 215.239 83.9453 215.531  c
83.0755 215.822 82.1093 215.968 81.0468 215.968  c
80.1197 215.968 79.2760 215.856 78.5156 215.632  c
77.7552 215.408 77.2083 215.109 76.8750 214.734  c
76.5416 214.359 76.3750 213.974 76.3750 213.578  c
76.3750 213.255 76.4817 212.921 76.6953 212.578  c
76.9088 212.234 77.1770 211.947 77.5000 211.718  c
77.7083 211.572 78.2812 211.234 79.2187 210.703  c
78.8750 210.432 78.7031 210.140 78.7031 209.828  c
78.7031 209.526 78.8541 209.205 79.1562 208.867  c
79.4583 208.528 80.1041 208.156 81.0937 207.750  c
80.2708 207.593 79.6171 207.250 79.1328 206.718  c
78.6484 206.187 78.4062 205.599 78.4062 204.953  c
78.4062 203.890 78.8724 202.940 79.8046 202.101  c
80.7369 201.263 81.9791 200.843 83.5312 200.843  c
84.0937 200.843 84.5546 200.898 84.9140 201.007  c
85.2734 201.117 85.6197 201.291 85.9531 201.531  c
88.9843 201.531 l
h
85.0937 203.296 m
85.0937 202.692 84.9270 202.218 84.5937 201.875  c
84.2604 201.531 83.8229 201.359 83.2812 201.359  c
82.4375 201.359 81.7395 201.783 81.1875 202.632  c
80.6354 203.481 80.3593 204.369 80.3593 205.296  c
80.3593 205.869 80.5338 206.341 80.8828 206.710  c
81.2317 207.080 81.6614 207.265 82.1718 207.265  c
82.5677 207.265 82.9505 207.156 83.3203 206.937  c
83.6901 206.718 84.0026 206.419 84.2578 206.039  c
84.5130 205.658 84.7161 205.171 84.8671 204.578  c
85.0182 203.984 85.0937 203.557 85.0937 203.296  c
h
79.7031 211.000 m
79.0989 211.281 78.6406 211.638 78.3281 212.070  c
78.0156 212.502 77.8593 212.927 77.8593 213.343  c
77.8593 213.843 78.0833 214.255 78.5312 214.578  c
79.1770 215.036 80.1250 215.265 81.3750 215.265  c
82.4375 215.265 83.3489 215.083 84.1093 214.718  c
84.8697 214.354 85.2500 213.885 85.2500 213.312  c
85.2500 213.020 85.1093 212.744 84.8281 212.484  c
84.5468 212.224 84.0052 212.010 83.2031 211.843  c
82.7552 211.750 81.5885 211.468 79.7031 211.000  c
h
f
Q
cliprestore
newpath
0 0 m
0 217.000 l
144.000 217.000 l
144.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 32.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 -5.00000 -32.0000 ] concat
[ 1.00000 0 0 1.00000 5.00000 32.0000 ] concat
Q
q
1.00000 0 0 RG
[ 1.00000 0 0 1.00000 -5.00000 -32.0000 ] concat
[ 1.00000 0 0 1.00000 5.00000 32.0000 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
49 10 45 39 rc
newpath
59.6406 28.0312 m
57.4218 35.7968 l
58.1406 35.0468 58.7682 34.5338 59.3046 34.2578  c
59.8411 33.9817 60.4010 33.8437 60.9843 33.8437  c
61.8072 33.8437 62.4817 34.1145 63.0078 34.6562  c
63.5338 35.1979 63.7968 35.9375 63.7968 36.8750  c
63.7968 38.0833 63.4505 39.2838 62.7578 40.4765  c
62.0651 41.6692 61.2005 42.5989 60.1640 43.2656  c
59.1276 43.9322 58.1041 44.2656 57.0937 44.2656  c
55.9583 44.2656 54.7968 43.8437 53.6093 43.0000  c
57.0156 31.2343 l
57.2760 30.3385 57.4062 29.8072 57.4062 29.6406  c
57.4062 29.4531 57.3489 29.3072 57.2343 29.2031  c
57.0572 29.0677 56.8020 29.0000 56.4687 29.0000  c
56.3125 29.0000 56.0729 29.0260 55.7500 29.0781  c
55.7500 28.6562 l
59.6406 28.0312 l
h
55.2968 43.1250 m
56.0468 43.5312 56.7031 43.7343 57.2656 43.7343  c
57.9218 43.7343 58.6041 43.4947 59.3125 43.0156  c
60.0208 42.5364 60.6354 41.7239 61.1562 40.5781  c
61.6770 39.4322 61.9375 38.2760 61.9375 37.1093  c
61.9375 36.4218 61.7682 35.8828 61.4296 35.4921  c
61.0911 35.1015 60.6875 34.9062 60.2187 34.9062  c
59.5208 34.9062 58.8385 35.1849 58.1718 35.7421  c
57.5052 36.2994 57.0312 37.0729 56.7500 38.0625  c
55.2968 43.1250 l
h
f
newpath
f
newpath
71.5000 34.5312 m
74.7343 33.8437 l
74.9739 34.3958 75.1614 34.9583 75.2968 35.5312  c
75.5052 36.3750 75.6718 37.3802 75.7968 38.5468  c
75.8593 39.1302 75.9427 40.3645 76.0468 42.2500  c
76.9843 41.2187 77.5416 40.5781 77.7187 40.3281  c
78.7083 38.9843 79.2760 38.1979 79.4218 37.9687  c
79.6718 37.5729 79.8437 37.2239 79.9375 36.9218  c
80.0208 36.7031 80.0625 36.4895 80.0625 36.2812  c
80.0625 36.0937 79.8880 35.8724 79.5390 35.6171  c
79.1901 35.3619 79.0156 35.0729 79.0156 34.7500  c
79.0156 34.5104 79.1119 34.2994 79.3046 34.1171  c
79.4974 33.9349 79.7239 33.8437 79.9843 33.8437  c
80.2968 33.8437 80.5729 33.9713 80.8125 34.2265  c
81.0520 34.4817 81.1718 34.8020 81.1718 35.1875  c
81.1718 35.5625 81.1145 35.9270 81.0000 36.2812  c
80.8020 36.8541 80.4375 37.5494 79.9062 38.3671  c
79.3750 39.1849 78.5156 40.2812 77.3281 41.6562  c
77.1822 41.8333 76.3541 42.7031 74.8437 44.2656  c
74.4218 44.2656 l
74.2447 39.5260 73.8697 36.5677 73.2968 35.3906  c
73.1093 35.0156 72.8020 34.8281 72.3750 34.8281  c
72.1875 34.8281 71.9218 34.8593 71.5781 34.9218  c
71.5000 34.5312 l
h
f
newpath
89.2500 24.7031 m
88.4218 27.0000 l
81.3906 27.0000 l
81.3906 26.6718 l
83.4531 24.7864 84.9062 23.2474 85.7500 22.0546  c
86.5937 20.8619 87.0156 19.7656 87.0156 18.7656  c
87.0156 18.0156 86.7838 17.3984 86.3203 16.9140  c
85.8567 16.4296 85.3072 16.1875 84.6718 16.1875  c
84.0781 16.1875 83.5494 16.3567 83.0859 16.6953  c
82.6224 17.0338 82.2812 17.5364 82.0625 18.2031  c
81.7343 18.2031 l
81.8802 17.1197 82.2552 16.2864 82.8593 15.7031  c
83.4635 15.1197 84.2187 14.8281 85.1250 14.8281  c
86.0937 14.8281 86.9036 15.1406 87.5546 15.7656  c
88.2057 16.3906 88.5312 17.1250 88.5312 17.9687  c
88.5312 18.5729 88.3906 19.1770 88.1093 19.7812  c
87.6718 20.7291 86.9687 21.7343 86.0000 22.7968  c
84.5312 24.3906 83.6197 25.3489 83.2656 25.6718  c
86.3750 25.6718 l
87.0000 25.6718 87.4401 25.6484 87.6953 25.6015  c
87.9505 25.5546 88.1822 25.4583 88.3906 25.3125  c
88.5989 25.1666 88.7760 24.9635 88.9218 24.7031  c
89.2500 24.7031 l
h
f
Q
cliprestore
newpath
0 0 m
0 217.000 l
144.000 217.000 l
144.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 32.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 -5.00000 -32.0000 ] concat
[ 1.00000 0 0 1.00000 5.00000 32.0000 ] concat
Q
Q
q
q
Q
q
Q
Q
Q
cliprestore
0 0 154 254 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
5 5 145 28 rc
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 0 146 27 rc
newpath
15.7031 7.60937 m
15.7031 13.5937 l
18.4843 13.5937 l
19.1197 13.5937 19.5859 13.4531 19.8828 13.1718  c
20.1796 12.8906 20.3750 12.3333 20.4687 11.5000  c
20.8906 11.5000 l
20.8906 16.6562 l
20.4687 16.6562 l
20.4583 16.0625 20.3802 15.6276 20.2343 15.3515  c
20.0885 15.0755 19.8880 14.8671 19.6328 14.7265  c
19.3776 14.5859 18.9947 14.5156 18.4843 14.5156  c
15.7031 14.5156 l
15.7031 19.2968 l
15.7031 20.0781 15.7552 20.5885 15.8593 20.8281  c
15.9322 21.0156 16.0885 21.1770 16.3281 21.3125  c
16.6510 21.4895 16.9947 21.5781 17.3593 21.5781  c
17.9062 21.5781 l
17.9062 22.0000 l
11.3750 22.0000 l
11.3750 21.5781 l
11.9062 21.5781 l
12.5416 21.5781 13.0000 21.3958 13.2812 21.0312  c
13.4583 20.7916 13.5468 20.2135 13.5468 19.2968  c
13.5468 9.46875 l
13.5468 8.69791 13.5000 8.18750 13.4062 7.93750  c
13.3333 7.75000 13.1770 7.58854 12.9375 7.45312  c
12.6145 7.27604 12.2708 7.18750 11.9062 7.18750  c
11.3750 7.18750 l
11.3750 6.76562 l
22.7031 6.76562 l
22.8437 10.1250 l
22.4531 10.1250 l
22.2552 9.40625 22.0286 8.88020 21.7734 8.54687  c
21.5182 8.21354 21.2005 7.97395 20.8203 7.82812  c
20.4401 7.68229 19.8541 7.60937 19.0625 7.60937  c
15.7031 7.60937 l
h
30.3383 20.5156 m
29.2863 21.3281 28.6248 21.8020 28.3540 21.9375  c
27.9477 22.1250 27.5154 22.2187 27.0571 22.2187  c
26.3488 22.2187 25.7628 21.9739 25.2993 21.4843  c
24.8357 20.9947 24.6040 20.3541 24.6040 19.5625  c
24.6040 19.0625 24.7185 18.6302 24.9477 18.2656  c
25.2602 17.7552 25.7941 17.2760 26.5493 16.8281  c
27.3045 16.3802 28.5675 15.8333 30.3383 15.1875  c
30.3383 14.7812 l
30.3383 13.7500 30.1769 13.0442 29.8540 12.6640  c
29.5310 12.2838 29.0571 12.0937 28.4321 12.0937  c
27.9633 12.0937 27.5883 12.2187 27.3071 12.4687  c
27.0258 12.7291 26.8852 13.0260 26.8852 13.3593  c
26.9008 14.0000 l
26.9008 14.3437 26.8123 14.6093 26.6352 14.7968  c
26.4581 14.9843 26.2290 15.0781 25.9477 15.0781  c
25.6665 15.0781 25.4399 14.9817 25.2680 14.7890  c
25.0961 14.5963 25.0102 14.3333 25.0102 14.0000  c
25.0102 13.3541 25.3383 12.7604 25.9946 12.2187  c
26.6508 11.6770 27.5727 11.4062 28.7602 11.4062  c
29.6769 11.4062 30.4269 11.5625 31.0102 11.8750  c
31.4581 12.1041 31.7863 12.4635 31.9946 12.9531  c
32.1300 13.2760 32.1977 13.9375 32.1977 14.9375  c
32.1977 18.4218 l
32.1977 19.4114 32.2159 20.0156 32.2524 20.2343  c
32.2889 20.4531 32.3488 20.5989 32.4321 20.6718  c
32.5154 20.7447 32.6144 20.7812 32.7290 20.7812  c
32.8540 20.7812 32.9581 20.7552 33.0415 20.7031  c
33.1977 20.6093 33.4998 20.3385 33.9477 19.8906  c
33.9477 20.5156 l
33.1144 21.6406 32.3175 22.2031 31.5571 22.2031  c
31.1821 22.2031 30.8878 22.0755 30.6743 21.8203  c
30.4607 21.5651 30.3488 21.1302 30.3383 20.5156  c
h
30.3383 19.7812 m
30.3383 15.8750 l
29.2133 16.3229 28.4842 16.6406 28.1508 16.8281  c
27.5571 17.1510 27.1326 17.4921 26.8774 17.8515  c
26.6222 18.2109 26.4946 18.6041 26.4946 19.0312  c
26.4946 19.5729 26.6560 20.0208 26.9790 20.3750  c
27.3019 20.7291 27.6717 20.9062 28.0883 20.9062  c
28.6613 20.9062 29.4113 20.5312 30.3383 19.7812  c
h
38.2500 6.03125 m
38.2500 19.6718 l
38.2500 20.3177 38.2968 20.7447 38.3906 20.9531  c
38.4843 21.1614 38.6302 21.3203 38.8281 21.4296  c
39.0260 21.5390 39.3906 21.5937 39.9218 21.5937  c
39.9218 22.0000 l
34.8750 22.0000 l
34.8750 21.5937 l
35.3437 21.5937 35.6640 21.5442 35.8359 21.4453  c
36.0078 21.3463 36.1432 21.1849 36.2421 20.9609  c
36.3411 20.7369 36.3906 20.3072 36.3906 19.6718  c
36.3906 10.3281 l
36.3906 9.17187 36.3645 8.46093 36.3125 8.19531  c
36.2604 7.92968 36.1770 7.74739 36.0625 7.64843  c
35.9479 7.54947 35.8020 7.50000 35.6250 7.50000  c
35.4270 7.50000 35.1770 7.56250 34.8750 7.68750  c
34.6875 7.28125 l
37.7500 6.03125 l
38.2500 6.03125 l
h
44.6401 6.03125 m
44.6401 19.6718 l
44.6401 20.3177 44.6870 20.7447 44.7807 20.9531  c
44.8745 21.1614 45.0203 21.3203 45.2182 21.4296  c
45.4161 21.5390 45.7807 21.5937 46.3120 21.5937  c
46.3120 22.0000 l
41.2651 22.0000 l
41.2651 21.5937 l
41.7338 21.5937 42.0542 21.5442 42.2260 21.4453  c
42.3979 21.3463 42.5333 21.1849 42.6323 20.9609  c
42.7312 20.7369 42.7807 20.3072 42.7807 19.6718  c
42.7807 10.3281 l
42.7807 9.17187 42.7547 8.46093 42.7026 8.19531  c
42.6505 7.92968 42.5672 7.74739 42.4526 7.64843  c
42.3380 7.54947 42.1922 7.50000 42.0151 7.50000  c
41.8172 7.50000 41.5672 7.56250 41.2651 7.68750  c
41.0776 7.28125 l
44.1401 6.03125 l
44.6401 6.03125 l
h
50.1084 6.03125 m
50.4313 6.03125 50.7021 6.14062 50.9209 6.35937  c
51.1396 6.57812 51.2490 6.84895 51.2490 7.17187  c
51.2490 7.48437 51.1396 7.75260 50.9209 7.97656  c
50.7021 8.20052 50.4313 8.31250 50.1084 8.31250  c
49.7959 8.31250 49.5276 8.20052 49.3037 7.97656  c
49.0797 7.75260 48.9677 7.48437 48.9677 7.17187  c
48.9677 6.84895 49.0797 6.57812 49.3037 6.35937  c
49.5276 6.14062 49.7959 6.03125 50.1084 6.03125  c
h
51.0459 11.4062 m
51.0459 19.6718 l
51.0459 20.3177 51.0927 20.7474 51.1865 20.9609  c
51.2802 21.1744 51.4182 21.3333 51.6005 21.4375  c
51.7828 21.5416 52.1188 21.5937 52.6084 21.5937  c
52.6084 22.0000 l
47.6084 22.0000 l
47.6084 21.5937 l
48.1084 21.5937 48.4443 21.5442 48.6162 21.4453  c
48.7880 21.3463 48.9261 21.1849 49.0302 20.9609  c
49.1344 20.7369 49.1865 20.3072 49.1865 19.6718  c
49.1865 15.7031 l
49.1865 14.5885 49.1500 13.8697 49.0771 13.5468  c
49.0250 13.3072 48.9443 13.1406 48.8349 13.0468  c
48.7255 12.9531 48.5719 12.9062 48.3740 12.9062  c
48.1656 12.9062 47.9104 12.9635 47.6084 13.0781  c
47.4521 12.6718 l
50.5615 11.4062 l
51.0459 11.4062 l
h
56.8891 13.5937 m
58.0974 12.1354 59.2485 11.4062 60.3422 11.4062  c
60.8943 11.4062 61.3735 11.5468 61.7797 11.8281  c
62.1860 12.1093 62.5089 12.5729 62.7485 13.2187  c
62.9152 13.6666 62.9985 14.3541 62.9985 15.2812  c
62.9985 19.6718 l
62.9985 20.3281 63.0506 20.7708 63.1547 21.0000  c
63.2381 21.1875 63.3709 21.3333 63.5532 21.4375  c
63.7355 21.5416 64.0766 21.5937 64.5766 21.5937  c
64.5766 22.0000 l
59.4829 22.0000 l
59.4829 21.5937 l
59.7016 21.5937 l
60.1808 21.5937 60.5141 21.5208 60.7016 21.3750  c
60.8891 21.2291 61.0193 21.0156 61.0922 20.7343  c
61.1235 20.6197 61.1391 20.2656 61.1391 19.6718  c
61.1391 15.4687 l
61.1391 14.5312 61.0193 13.8515 60.7797 13.4296  c
60.5402 13.0078 60.1287 12.7968 59.5454 12.7968  c
58.6599 12.7968 57.7745 13.2812 56.8891 14.2500  c
56.8891 19.6718 l
56.8891 20.3697 56.9308 20.8020 57.0141 20.9687  c
57.1183 21.1875 57.2615 21.3463 57.4438 21.4453  c
57.6261 21.5442 57.9985 21.5937 58.5610 21.5937  c
58.5610 22.0000 l
53.4672 22.0000 l
53.4672 21.5937 l
53.7016 21.5937 l
54.2224 21.5937 54.5740 21.4609 54.7563 21.1953  c
54.9386 20.9296 55.0297 20.4218 55.0297 19.6718  c
55.0297 15.8593 l
55.0297 14.6197 55.0037 13.8645 54.9516 13.5937  c
54.8995 13.3229 54.8136 13.1406 54.6938 13.0468  c
54.5740 12.9531 54.4204 12.9062 54.2329 12.9062  c
54.0141 12.9062 53.7589 12.9635 53.4672 13.0781  c
53.3110 12.6718 l
56.4047 11.4062 l
56.8891 11.4062 l
56.8891 13.5937 l
h
68.1391 18.2500 m
67.5141 17.9375 67.0323 17.5078 66.6938 16.9609  c
66.3553 16.4140 66.1860 15.8072 66.1860 15.1406  c
66.1860 14.1197 66.5688 13.2421 67.3344 12.5078  c
68.1001 11.7734 69.0818 11.4062 70.2797 11.4062  c
71.2693 11.4062 72.1235 11.6458 72.8422 12.1250  c
75.0141 12.1250 l
75.3370 12.1250 75.5245 12.1354 75.5766 12.1562  c
75.6287 12.1770 75.6652 12.2083 75.6860 12.2500  c
75.7277 12.3229 75.7485 12.4427 75.7485 12.6093  c
75.7485 12.8072 75.7329 12.9427 75.7016 13.0156  c
75.6808 13.0572 75.6417 13.0885 75.5844 13.1093  c
75.5271 13.1302 75.3370 13.1406 75.0141 13.1406  c
73.6704 13.1406 l
74.0974 13.6822 74.3110 14.3697 74.3110 15.2031  c
74.3110 16.1614 73.9438 16.9817 73.2094 17.6640  c
72.4751 18.3463 71.4881 18.6875 70.2485 18.6875  c
69.7381 18.6875 69.2172 18.6145 68.6860 18.4687  c
68.3631 18.7500 68.1417 18.9974 68.0219 19.2109  c
67.9021 19.4244 67.8422 19.6041 67.8422 19.7500  c
67.8422 19.8750 67.9047 19.9974 68.0297 20.1171  c
68.1547 20.2369 68.3995 20.3229 68.7641 20.3750  c
68.9724 20.4062 69.4933 20.4375 70.3266 20.4687  c
71.8683 20.5000 72.8683 20.5520 73.3266 20.6250  c
74.0245 20.7187 74.5818 20.9739 74.9985 21.3906  c
75.4152 21.8072 75.6235 22.3229 75.6235 22.9375  c
75.6235 23.7916 75.2277 24.5885 74.4360 25.3281  c
73.2589 26.4218 71.7329 26.9687 69.8579 26.9687  c
68.4099 26.9687 67.1912 26.6406 66.2016 25.9843  c
65.6391 25.6093 65.3579 25.2187 65.3579 24.8125  c
65.3579 24.6354 65.3995 24.4583 65.4829 24.2812  c
65.6079 24.0000 65.8683 23.6145 66.2641 23.1250  c
66.3162 23.0520 66.6964 22.6458 67.4047 21.9062  c
67.0193 21.6770 66.7459 21.4713 66.5844 21.2890  c
66.4230 21.1067 66.3422 20.8958 66.3422 20.6562  c
66.3422 20.3958 66.4490 20.0911 66.6626 19.7421  c
66.8761 19.3932 67.3683 18.8958 68.1391 18.2500  c
h
70.0922 11.9531 m
69.5402 11.9531 69.0766 12.1744 68.7016 12.6171  c
68.3266 13.0599 68.1391 13.7343 68.1391 14.6406  c
68.1391 15.8281 68.3943 16.7447 68.9047 17.3906  c
69.2902 17.8906 69.7849 18.1406 70.3891 18.1406  c
70.9516 18.1406 71.4178 17.9270 71.7876 17.5000  c
72.1573 17.0729 72.3422 16.4010 72.3422 15.4843  c
72.3422 14.2968 72.0818 13.3645 71.5610 12.6875  c
71.1860 12.1979 70.6964 11.9531 70.0922 11.9531  c
h
68.0297 22.0000 m
67.6756 22.3854 67.4099 22.7421 67.2329 23.0703  c
67.0558 23.3984 66.9672 23.7031 66.9672 23.9843  c
66.9672 24.3385 67.1808 24.6510 67.6079 24.9218  c
68.3579 25.3802 69.4412 25.6093 70.8579 25.6093  c
72.2016 25.6093 73.1938 25.3724 73.8344 24.8984  c
74.4751 24.4244 74.7954 23.9166 74.7954 23.3750  c
74.7954 22.9895 74.6079 22.7135 74.2329 22.5468  c
73.8370 22.3802 73.0662 22.2864 71.9204 22.2656  c
70.2329 22.2135 68.9360 22.1250 68.0297 22.0000  c
h
89.9047 20.8437 m
89.4047 21.3645 88.9152 21.7395 88.4360 21.9687  c
87.9568 22.1979 87.4412 22.3125 86.8891 22.3125  c
85.7641 22.3125 84.7823 21.8437 83.9438 20.9062  c
83.1053 19.9687 82.6860 18.7604 82.6860 17.2812  c
82.6860 15.8125 83.1495 14.4635 84.0766 13.2343  c
85.0037 12.0052 86.1964 11.3906 87.6547 11.3906  c
88.5610 11.3906 89.3110 11.6822 89.9047 12.2656  c
89.9047 10.3593 l
89.9047 9.19270 89.8761 8.47395 89.8188 8.20312  c
89.7615 7.93229 89.6730 7.74739 89.5532 7.64843  c
89.4334 7.54947 89.2849 7.50000 89.1079 7.50000  c
88.9099 7.50000 88.6495 7.56250 88.3266 7.68750  c
88.1860 7.28125 l
91.2485 6.03125 l
91.7641 6.03125 l
91.7641 17.9218 l
91.7641 19.1302 91.7902 19.8671 91.8422 20.1328  c
91.8943 20.3984 91.9829 20.5833 92.1079 20.6875  c
92.2329 20.7916 92.3787 20.8437 92.5454 20.8437  c
92.7433 20.8437 93.0141 20.7812 93.3579 20.6562  c
93.4829 21.0468 l
90.4204 22.3125 l
89.9047 22.3125 l
89.9047 20.8437 l
h
89.9047 20.0625 m
89.9047 14.7500 l
89.8631 14.2500 89.7303 13.7890 89.5063 13.3671  c
89.2823 12.9453 88.9829 12.6276 88.6079 12.4140  c
88.2329 12.2005 87.8735 12.0937 87.5297 12.0937  c
86.8631 12.0937 86.2745 12.3906 85.7641 12.9843  c
85.0766 13.7656 84.7329 14.9010 84.7329 16.3906  c
84.7329 17.9114 85.0636 19.0729 85.7251 19.8750  c
86.3865 20.6770 87.1235 21.0781 87.9360 21.0781  c
88.6131 21.0781 89.2693 20.7395 89.9047 20.0625  c
h
99.1704 11.4062 m
100.732 11.4062 101.982 12.0000 102.920 13.1875  c
103.722 14.1979 104.123 15.3593 104.123 16.6718  c
104.123 17.5885 103.902 18.5182 103.459 19.4609  c
103.016 20.4036 102.407 21.1145 101.631 21.5937  c
100.855 22.0729 99.9933 22.3125 99.0454 22.3125  c
97.4933 22.3125 96.2641 21.6979 95.3579 20.4687  c
94.5870 19.4270 94.2016 18.2552 94.2016 16.9531  c
94.2016 16.0156 94.4334 15.0807 94.8969 14.1484  c
95.3605 13.2161 95.9751 12.5260 96.7407 12.0781  c
97.5063 11.6302 98.3162 11.4062 99.1704 11.4062  c
h
98.8266 12.1406 m
98.4308 12.1406 98.0323 12.2578 97.6313 12.4921  c
97.2303 12.7265 96.9047 13.1406 96.6547 13.7343  c
96.4047 14.3281 96.2797 15.0885 96.2797 16.0156  c
96.2797 17.5156 96.5792 18.8072 97.1782 19.8906  c
97.7771 20.9739 98.5610 21.5156 99.5297 21.5156  c
100.259 21.5156 100.857 21.2161 101.326 20.6171  c
101.795 20.0182 102.029 18.9895 102.029 17.5312  c
102.029 15.7083 101.639 14.2708 100.857 13.2187  c
100.326 12.5000 99.6495 12.1406 98.8266 12.1406  c
h
105.061 11.7187 m
109.373 11.7187 l
109.373 12.1250 l
108.977 12.1562 108.719 12.2291 108.600 12.3437  c
108.480 12.4583 108.420 12.6197 108.420 12.8281  c
108.420 13.0572 108.482 13.3385 108.607 13.6718  c
110.811 19.5781 l
113.014 14.7656 l
112.436 13.2500 l
112.259 12.8020 112.024 12.4895 111.732 12.3125  c
111.566 12.2083 111.259 12.1458 110.811 12.1250  c
110.811 11.7187 l
115.701 11.7187 l
115.701 12.1250 l
115.160 12.1458 114.779 12.2447 114.561 12.4218  c
114.404 12.5364 114.326 12.7291 114.326 13.0000  c
114.326 13.1458 114.357 13.2968 114.420 13.4531  c
116.764 19.3593 l
118.920 13.6718 l
119.076 13.2656 119.154 12.9427 119.154 12.7031  c
119.154 12.5572 119.081 12.4296 118.936 12.3203  c
118.790 12.2109 118.503 12.1458 118.076 12.1250  c
118.076 11.7187 l
121.311 11.7187 l
121.311 12.1250 l
120.665 12.2291 120.186 12.6718 119.873 13.4531  c
116.436 22.3125 l
115.982 22.3125 l
113.404 15.7500 l
110.404 22.3125 l
109.998 22.3125 l
106.701 13.6718 l
106.482 13.1197 106.266 12.7500 106.053 12.5625  c
105.839 12.3750 105.509 12.2291 105.061 12.1250  c
105.061 11.7187 l
h
125.249 13.5937 m
126.457 12.1354 127.608 11.4062 128.702 11.4062  c
129.254 11.4062 129.733 11.5468 130.139 11.8281  c
130.545 12.1093 130.868 12.5729 131.108 13.2187  c
131.275 13.6666 131.358 14.3541 131.358 15.2812  c
131.358 19.6718 l
131.358 20.3281 131.410 20.7708 131.514 21.0000  c
131.598 21.1875 131.730 21.3333 131.913 21.4375  c
132.095 21.5416 132.436 21.5937 132.936 21.5937  c
132.936 22.0000 l
127.842 22.0000 l
127.842 21.5937 l
128.061 21.5937 l
128.540 21.5937 128.874 21.5208 129.061 21.3750  c
129.249 21.2291 129.379 21.0156 129.452 20.7343  c
129.483 20.6197 129.499 20.2656 129.499 19.6718  c
129.499 15.4687 l
129.499 14.5312 129.379 13.8515 129.139 13.4296  c
128.900 13.0078 128.488 12.7968 127.905 12.7968  c
127.019 12.7968 126.134 13.2812 125.249 14.2500  c
125.249 19.6718 l
125.249 20.3697 125.290 20.8020 125.374 20.9687  c
125.478 21.1875 125.621 21.3463 125.803 21.4453  c
125.986 21.5442 126.358 21.5937 126.920 21.5937  c
126.920 22.0000 l
121.827 22.0000 l
121.827 21.5937 l
122.061 21.5937 l
122.582 21.5937 122.933 21.4609 123.116 21.1953  c
123.298 20.9296 123.389 20.4218 123.389 19.6718  c
123.389 15.8593 l
123.389 14.6197 123.363 13.8645 123.311 13.5937  c
123.259 13.3229 123.173 13.1406 123.053 13.0468  c
122.933 12.9531 122.780 12.9062 122.592 12.9062  c
122.374 12.9062 122.118 12.9635 121.827 13.0781  c
121.670 12.6718 l
124.764 11.4062 l
125.249 11.4062 l
125.249 13.5937 l
h
f
Q
cliprestore
newpath
0 0 m
0 28.0000 l
145.000 28.0000 l
145.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
cliprestore
Q
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
